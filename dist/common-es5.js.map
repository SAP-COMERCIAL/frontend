{"version":3,"sources":["webpack:///src/app/pages/catcustomer/customer/customer.component.ts","webpack:///src/app/pages/catcustomer/customer/customer.component.html","webpack:///src/app/pages/supplier/supplier.component.ts","webpack:///src/app/pages/supplier/supplier.component.html"],"names":["CustomerComponent","dialog","_excelService","_customerservice","pageIndex","pageSize","currentPage","totalSize","filterChange","EventEmitter","displayedColumns","getcustomer","console","log","dataSourceShowToExcel","dataSourceShow","filteredData","forEach","element","push","nombre","direccion","RFC","rfc","estatus","estado","exportAsExcelFile","evetn","dialogConfig","MatDialogConfig","data","id","title","arrayData","requisicionId","width","height","disableClose","dialogRef","open","CustomerDetailComponent","afterClosed","subscribe","result","window","location","reload","event","filtro","target","value","filter","trim","toLowerCase","e","iterator","end","start","part","array","slice","MatTableDataSource","sort","paginator","getcustomerAll","res","length","error","MatSort","MatPaginator","filtrar","descargarExcel","newcustomer","SupplierComponent"],"mappings":"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","file":"common-es5.js","sourcesContent":["import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { customerModel } from 'src/app/models/customer.model';\nimport { customerservice } from 'src/app/services/customer.service';\nimport { CustomerDetailComponent } from 'src/app/components/customer-detail/customer-detail.component';\n\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport * as moment from 'moment';\nimport { AbstractControl, FormBuilder } from '@angular/forms';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { MatDialogConfig } from '@angular/material/dialog';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSelectChange } from '@angular/material/select';\nimport { MatSortModule } from '@angular/material/sort';\nimport { DataSource } from '@angular/cdk/table';\nimport { ProjectCaptureDetailComponent } from 'src/app/components/project-capture-detail/project-capture-detail/project-capture-detail.component';\nimport { CategoriesComponent } from 'src/app/components/categories/categories/categories.component';\nimport { ExcelServiceService } from 'src/app/helpers/excel-service.service';\nimport { getMatFormFieldPlaceholderConflictError } from '@angular/material/form-field';\n\n@Component({\n  selector: 'app-customer',\n  templateUrl: './customer.component.html',\n  styleUrls: ['./customer.component.css']\n})\n\nexport class CustomerComponent implements OnInit {\n\n// =================\n// DECLARACIONES\n// =================\n\n// Para paginaci√≥n\npublic pageIndex:number = 0;\npublic pageSize:number = 20;\npublic currentPage = 0;\npublic totalSize:number = 0;\npublic array: any;\ndataSourceShow : MatTableDataSource<customerModel>\n\n  @ViewChild(MatSort,{static:true}) sort: MatSort;\n  @ViewChild(MatPaginator,{static:true}) paginator: MatPaginator;\n  @Output() filterChange = new EventEmitter();\n\n  displayedColumns = ['id', 'nombre', 'direccion', 'rfc', 'estado', 'edit'];\n\n  constructor(public dialog: MatDialog\n    , private _excelService : ExcelServiceService\n    , private _customerservice : customerservice) { }\n\n  // =================\n  // PROCEDIMIENTOS\n  // =================\n\n  ngOnInit(): void {\n\n    this.getcustomer();\n  }\n\n  descargarExcel(){\n    console.log('Descargar a excel');\n    let dataSourceShowToExcel : any[] = [];\n\n  this.dataSourceShow.filteredData.forEach(element => {\n    dataSourceShowToExcel.push({\n                              nombre : element.nombre\n                              , direccion : element.direccion\n                              , RFC : element.rfc\n                              , estatus : element.estado\n      })\n    });\n\n    this._excelService.exportAsExcelFile(dataSourceShowToExcel, 'Clientes');  \n  }\n\n  newcustomer(evetn){\n    console.log('Alta de cliente');\n\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.data = {\n      id: 1,\n      title: 'CLIENTE',\n      arrayData : null,\n      requisicionId: 0\n     \n    }\n    dialogConfig.width = '1300px';\n    dialogConfig.height = '900px';\n    dialogConfig.disableClose = true;\n\n    const dialogRef = this.dialog.open(CustomerDetailComponent, dialogConfig);\n\n    dialogRef.afterClosed().subscribe(result => {\n      window.location.reload();\n    });\n  }\n\n  filtrar(event : Event){\n    const filtro = (event.target as HTMLInputElement).value;\n    this.dataSourceShow.filter = filtro.trim().toLowerCase();\n    console.log('filtro', filtro);\n  }\n\n  // =================\n  // UTILERIAS\n  // =================\n\n  public handlePage(e: any) {\n    this.currentPage = e.pageIndex;\n    this.pageSize = e.pageSize;\n    this.iterator();\n  }\n\n  private iterator() {\n    const end = (this.currentPage + 1) * this.pageSize;\n    const start = this.currentPage * this.pageSize;\n    const part = this.array.slice(0, this.totalSize);\n    this.dataSourceShow = new MatTableDataSource(part);\n    this.dataSourceShow.sort = this.sort;\n    this.dataSourceShow.paginator = this.paginator;\n  }\n\n  // =================\n  // SERVICIOS\n  // =================\n\n  getcustomer(){\n    // Proyectos registrados\n    this._customerservice.getcustomerAll().subscribe(\n      res=> {\n        console.log('Clientes', res);\n        this.dataSourceShow = new MatTableDataSource(res);\n        this.array = res;\n        this.totalSize = this.array.length;\n        \n        this.iterator();\n        this.dataSourceShow.sort = this.sort;\n        \n      },\n      error => console.log(\"error consulta regiones\",error)\n    )\n  }\n\n}\n","<div class=\"header bg-gradient-danger pb-8 pt-5 pt-md-8\">\n    <div class=\"container-fluid\">\n        <div class=\"header-body\">\n            <!-- Card stats -->\n        </div>\n    </div>\n</div>\n<!-- Page content -->\n<div class=\"container-fluid mt--7\">\n\n    <!-- Table -->\n    <div class=\"row\">\n        <div class=\"col\">\n            <div class=\"card shadow\">\n                <div class=\"card-header border-0\">\n                    <h3 class=\"mb-0\">Clientes</h3>\n                </div>\n\n                <!-- <form> -->\n\n                <h6 class=\"heading-small text-muted mb-4\"></h6>\n                <hr class=\"my-4\" />\n                <!-- </form> -->\n                <div class=\"card\">\n                    <table>\n                        <tr>\n                            <td class=\"col20\"><input type=\"text\" class=\"form-control form-control-line\"\n                                    placeholder=\"BUSCAR\" (keyup)=\"filtrar($event)\">\n                            </td>\n                            <td class=\"col70\"></td>\n                            <td class=\"col10\"><button mat-raised-button color=\"primary\"\n                                    (click)=\"descargarExcel()\">Descargar</button></td>\n                            <td class=\"col10\"><button mat-raised-button color=\"accent\"\n                                    (click)=\"newcustomer($event)\">Nuevo Cliente</button></td>\n                            <td class=\"col10\"></td>\n                        </tr>\n                    </table>\n                    <br>\n                </div>\n\n                <!-- INICIA CUERPO DE LA P√ÅGINA-->\n                <div class=\"col-12 col-md-12 p-0\">\n                    <div class=\"card\">\n                        <div class=\"card-body card-body-table\">\n                            <!-- <mat-table [dataSource]=\"dataSourceShow\" matSort class=\"mat-elevation-z8\"\n                                style=\"width: 95%;\">\n\n                                \n                                <ng-container matColumnDef=\"id\">\n                                    <th mat-header-cell *matHeaderCellDef mat-sort-header class=\"col30\">\n                                        id </th>\n                                    <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n                                </ng-container>\n\n                                \n                                <ng-container matColumnDef=\"nombre\">\n                                    <th mat-header-cell *matHeaderCellDef mat-sort-header class=\"col30\">\n                                        Nombre </th>\n                                    <td mat-cell *matCellDef=\"let element\"> {{element.nombre}} </td>\n                                </ng-container>\n\n                                \n                                <ng-container matColumnDef=\"direccion\">\n                                    <th mat-header-cell *matHeaderCellDef mat-sort-header class=\"col10\"> Direcci√≥n\n                                    </th>\n                                    <td mat-cell *matCellDef=\"let element\"> {{element.direccion}} </td>\n                                </ng-container>\n\n                                \n                                <ng-container matColumnDef=\"rfc\">\n                                    <th mat-header-cell *matHeaderCellDef mat-sort-header class=\"col10\"> rfc </th>\n                                    <td mat-cell *matCellDef=\"let element\"> {{element.rfc}}\n                                    </td>\n                                </ng-container>\n\n                                \n                                <ng-container matColumnDef=\"estado\">\n                                    <th mat-header-cell *matHeaderCellDef mat-sort-header class=\"col20\"> Estatus </th>\n                                    <td mat-cell *matCellDef=\"let element\">\n                                        <ng-container *ngIf=\"element.estado == true\">ACTIVO</ng-container>\n                                        <ng-container *ngIf=\"element.estado == false\">INACTIVO</ng-container>\n                                    </td>\n                                </ng-container>\n\n                                \n                                <ng-container matColumnDef=\"edit\">\n                                    <th mat-header-cell *matHeaderCellDef class=\".colbuttons\"> Consultar </th>\n                                    <td mat-cell *matCellDef=\"let element\"> <button mat-button color=\"primary\"\n                                            (click)=\"edit(element, $event)\">Consultar</button> </td>\n                                </ng-container>\n\n                                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n                                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n                            </mat-table> -->\n\n                        </div>\n                        <!-- <mat-paginator [pageSizeOptions]=\"[20, 100, 150]\" [showFirstLastButtons]=\"true\"\n                            [pageSize]=\"pageSize\" [length]=\"totalSize\" (page)=\"handlePage($event)\" style=\"width: 95%;\">\n                        </mat-paginator> -->\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-supplier',\n  templateUrl: './supplier.component.html',\n  styleUrls: ['./supplier.component.css']\n})\nexport class SupplierComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>supplier works!</p>\n"]}